using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class IKTesting : MonoBehaviour
{
    public enum InterpolationType { bezier, linear };
    public InterpolationType lineType;

    public int boneLength; //amount of bones
    public Transform targetTransform;
    public Transform baseTransform;

    [Header("Curve Variables")]
    private Vector3 frontCurve; //transformed position base position
    public Vector3 frontCurveEdit;
    private Vector3 backCurve; //transformed position target position
    public Vector3 backCurveEdit;

    [Header("Transform Variables")]
    public Transform[] boneTransform;
    Vector3[] bonePosition; //goal position to transform to rotation
    Quaternion[] boneRotation; //actual goal position
    Vector3[] boneScale;    //unused

    [Header("Bone Distances")]
    private float extendedDistanceTotal;
    private float[] extendedDistaceForBones;
    private float totalDistance;
    private float[] boneDistance;

    [Header("Curve Interpolation")]
    public int Iterations = 25;
    public float[] arcDistance;
    public float arcDistanceTotal;

    

    [Header("DebugArrays")]
    public int DebugArrayLength;
    public float[] DebugFloatArray;
    public Vector3[] DebugVector3Array;
    public Quaternion[] DebugQuaternionArray;

    private void Start()
    {
        DebugFloatArray = new float[DebugArrayLength];
        DebugVector3Array = new Vector3[DebugArrayLength];
        DebugQuaternionArray = new Quaternion[DebugArrayLength];


        // get array length here
        boneTransform = new Transform[boneLength];
        extendedDistaceForBones = new float[boneLength];
        boneRotation = new Quaternion[boneLength];
        boneDistance = new float[boneLength];

        arcDistance = new float[Iterations];

        int i = 0;
        Transform recurseBoneTransform; //could make an array of base transforms for multiple limbs

        //initialize array values here
        for (i = 0; i < boneLength; i++)
        {
            if (i == 0)
            {
                boneTransform.SetValue(baseTransform, 0);
                extendedDistaceForBones.SetValue(0, 0);
            }

            if (i < boneLength - 1)
            {
                recurseBoneTransform = boneTransform[i].GetChild(0); //connecting bone needs to be first in position
                boneTransform.SetValue(recurseBoneTransform, i + 1);
            }

            boneRotation.SetValue(boneTransform[i].localRotation, i);

            if (i > 0)
            {
                Vector3 initialposition = boneTransform[i - 1].position;
                Vector3 finalPosition = boneTransform[i].position;
                float distance = Vector3.Distance(initialposition, finalPosition);
                extendedDistaceForBones.SetValue(distance + extendedDistaceForBones[i-1], i);

                extendedDistanceTotal += distance;
            }
        }
    }
    private void Update()
    {
        BezierLookUpTable();
        //to Remove just to avoid null errors, should be given by call
        frontCurve = baseTransform.localPosition + frontCurveEdit;
        backCurve = targetTransform.localPosition + backCurveEdit;

    }
    /*get line from target to position, then isolate by rotation degrees of freedom, 
     * rotation should be where vector target is pointing
     * need actual position with bones that shouldnt be attached
     * normalize target distance if above max distance
     */
    public void BezierLookUpTable() //nonlinear position on curve
    {
        //setting couters to 0
        int i = 0;
        float arcDistanceCumulative = 0;

        float[] t = new float[Iterations];

        Vector3[] finishedPosition = new Vector3[boneLength];
        Vector3[] BezierCurvePos = new Vector3[Iterations];
        BezierCurvePos.SetValue(Vector3.zero, 0); // first array value should be 0
        finishedPosition.SetValue(Vector3.zero, 0);

        //iterations
        for (i = 1; i < Iterations; i++)
        {
            t.SetValue((float)i / (float)Iterations, i);

            BezierCurvePos.SetValue(BezierCurve(t[i]), i);//gets value of curve from t value
            //calculates arc distance from T values
            arcDistanceCumulative += Vector3.Distance(BezierCurvePos[i - 1], BezierCurvePos[i]);
            arcDistance.SetValue(arcDistanceCumulative, i);
            arcDistanceTotal = arcDistance[i] + arcDistance[1];

            if(i == Iterations - 1)
            {
                BezierDistanceCalculation(t);
            }
        }
    }
    public void BezierDistanceCalculation(float[] t) //Linear position on curve rounded up
    {
        int i = 1;
        int index = 0;
        float boneDistanceCumulative;
        float[] T = new float[boneLength];

        for (i = 1; i < boneLength; i++)
        {

            boneDistanceCumulative = extendedDistaceForBones[i];
            float desiredDistance = (boneDistanceCumulative / extendedDistanceTotal) * arcDistanceTotal; // can vary distance between 1 bone and another

            while (arcDistance[index] < desiredDistance && index != Iterations-1) //gets first index above desired position
            {
                index++;
            }

            T.SetValue(t[index], i);
            //bonePosition = BezierCurve(T[i]);
            boneTransform[i].position = BezierCurve(T[i]);
        }
    }
    /// see if i need this later
    /*
    public void BoneRotation(Vector3[] Position)
    {
        Quaternion[] PositionToRotation = new Quaternion[boneLength];

        for(int i = 1; i <= boneLength; i++)
        {
            PositionToRotation[i].SetLookRotation(Position[i],Vector3.up);
            

            boneTransform[i].rotation = PositionToRotation[i];
        }

    }
    */





    public Vector3 BezierCurve(float Tinput) // called to calculate positions using percentage of curve NONLINEAR!!
    {
        //layer 1 bezier curve cubic
        Vector3 position1 = baseTransform.position;
        Vector3 position2 = frontCurve;
        Vector3 position3 = backCurve;
        Vector3 position4 = targetTransform.position;
        //layer 2
        Vector3 positionA;
        Vector3 positionB;
        Vector3 positionC;
        //layer 3
        Vector3 positionD;
        Vector3 positionE;
        //layer 4
        Vector3 bezierOutput;

        positionA = Vector3.Lerp(position1, position2, Tinput);
        positionB = Vector3.Lerp(position2, position3, Tinput);
        positionC = Vector3.Lerp(position3, position4, Tinput);

        positionD = Vector3.Lerp(positionA, positionB, Tinput);
        positionE = Vector3.Lerp(positionB, positionC, Tinput);

        bezierOutput = Vector3.Lerp(positionD, positionE, Tinput);

        return bezierOutput;
    }
}
